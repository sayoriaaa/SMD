function parse_obj(filename)
    vertices = Vector{Vector{Float64}}()  
    faces = Vector{Vector{Int}}()         

    open(filename) do file
        for line in eachline(file)
            parts = split(line)
            if length(parts) > 0
                if parts[1] == "v" 
                    vertex = parse.(Float64, parts[2:4])
                    push!(vertices, vertex)
                elseif parts[1] == "f"  
                    face = parse.(Int, [split(part, "/")[1] for part in parts[2:end]])
                    push!(faces, face)
                end
            end
        end
    end

    V = transpose(hcat(vertices...))
    F = transpose(hcat(faces...))

    return V, F
end


function save_obj(filename, V, F)
    V_rows = size(V)[1]
    F_rows = size(F)[1]
    open(filename, "w") do file
        println(file, "####\n#\n# OBJ File Generated by Julia")
        println(file, "#\n#### Object ", filename)
        println(file, "#\n# Vertices: ", string.(V_rows))
        println(file, "#\n# Faces: ", string.(F_rows))
        println(file, "#\n####")

        for i in 1:V_rows
            println(file, "v ", join(string.(V[i,:]), " "))
        end

        for i in 1:F_rows
            println(file, "f ", join(string.(F[i,:]), " "))
        end
    end
    println(filename, " saved")
end

V, F = parse_obj("eight.obj")

V = V.*2

save_obj("output.obj", V, F)

V, _ = parse_obj("eight.obj")
println(size(V))